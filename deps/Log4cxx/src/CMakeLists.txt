cmake_minimum_required(VERSION 3.26)
cmake_policy(SET CMP0135 NEW)

project(Log4cxx)

include(ExternalProject)
include(FetchContent)

#Build Log4cxx deps first
set(EXPAT_DIR ${CMAKE_BINARY_DIR}/_deps/EXPAT/)

set(EXPAT_BINARY_DIR ${CMAKE_BINARY_DIR}/EXPAT/)
set(EXPAT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/deps/EXPAT)
set(EXPAT_INSTALL_DIR ${EXPAT_DIR})

ExternalProject_Add(EXPAT
	GIT_REPOSITORY https://github.com/libexpat/libexpat.git
	GIT_TAG R_2_5_0
    SOURCE_DIR ${EXPAT_SOURCE_DIR}
	SOURCE_SUBDIR expat
    BINARY_DIR ${EXPAT_BINARY_DIR}
    INSTALL_DIR ${EXPAT_INSTALL_DIR}
    BUILD_ALWAYS OFF
    # Custom configuration command
    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo "Configuring Expat..."
    COMMAND ${CMAKE_COMMAND} -B ${EXPAT_BINARY_DIR} -S ${EXPAT_SOURCE_DIR}/expat
							-G ${CMAKE_GENERATOR}
							-DCMAKE_INSTALL_PREFIX=${EXPAT_INSTALL_DIR}
							-DCMAKE_BUILD_TYPE=Release
							-DCMAKE_CONFIGURATION_TYPES=Release
							-DCMAKE_CXX_STANDARD=20
							-DCMAKE_CXX_STANDARD_REQUIRED=TRUE
							-DEXPAT_SOURCE_DIR=${EXPAT_SOURCE_DIR}/expat
							-DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
							-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
							-DEXPAT_BUILD_EXAMPLES=OFF
							-DEXPAT_SHARED_LIBS=OFF
							-DEXPAT_MSVC_STATIC_CRT=ON
							-DBUILD_SHARED_LIBS=OFF


    BUILD_COMMAND ${CMAKE_COMMAND} -E echo "Starting Expat build..."
    COMMAND ${CMAKE_COMMAND} --build ${EXPAT_BINARY_DIR} --config Release

    INSTALL_COMMAND ${CMAKE_COMMAND} --install ${EXPAT_BINARY_DIR} --config Release
    LOG_CONFIGURE ON
    LOG_BUILD ON
    LOG_INSTALL ON
	EXCLUDE_FROM_ALL 
)

set_target_properties(EXPAT PROPERTIES FOLDER "")

set(APR_DIR ${CMAKE_BINARY_DIR}/_deps/APR/)

set(APR_BINARY_DIR ${CMAKE_BINARY_DIR}/APR/)
set(APR_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/deps/APR)
set(APR_INSTALL_DIR ${APR_DIR})

set(ENV_PATH $ENV{PATH})

if(WIN32)
string(REPLACE "\\" "/" ENV_PATH ${ENV_PATH})
endif()

FetchContent_Declare(
    apr
    GIT_REPOSITORY https://github.com/apache/apr.git
    GIT_TAG 1.7.x
    SOURCE_DIR ${APR_SOURCE_DIR}/src
)

if(NOT apr_POPULATED)
    FetchContent_Populate(apr)
endif()

ExternalProject_Add(APR
    SOURCE_DIR ${APR_SOURCE_DIR}
    BINARY_DIR ${APR_BINARY_DIR}
    INSTALL_DIR ${APR_INSTALL_DIR}
    BUILD_ALWAYS OFF

    # Custom configuration command
    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo "Configuring APR..."
    COMMAND ${CMAKE_COMMAND} -B ${APR_BINARY_DIR} -S ${APR_SOURCE_DIR} 
							-G ${CMAKE_GENERATOR}
							-DCMAKE_INSTALL_PREFIX=${APR_INSTALL_DIR}
							-DCMAKE_BUILD_TYPE=Release
							-DCMAKE_CONFIGURATION_TYPES=Release
							-DAPR_SOURCE_DIR=${APR_SOURCE_DIR}
							-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
							-DCMAKE_MODULE_PATH=${CMAKE_CURRENT_SOURCE_DIR}
							-DEXPAT_INSTALL_DIR=${EXPAT_INSTALL_DIR}lib/cmake/expat-2.5.0
							-DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
							-DENV_PATH=${ENV_PATH}

    BUILD_COMMAND ${CMAKE_COMMAND} -E echo "Starting APR build..."
    COMMAND ${CMAKE_COMMAND} --build ${APR_BINARY_DIR} --config Release

    INSTALL_COMMAND ${CMAKE_COMMAND} --install ${APR_BINARY_DIR} --config Release
    LOG_CONFIGURE ON
    LOG_BUILD ON
    LOG_INSTALL ON
	EXCLUDE_FROM_ALL 
	DEPENDS EXPAT
)

set_target_properties(APR PROPERTIES FOLDER "")

if(APPLE)
set(APR_ICONV_DIR ${CMAKE_BINARY_DIR}/_deps/APR-Iconv/)

set(APR_ICONV_BINARY_DIR ${CMAKE_BINARY_DIR}/APR-Iconv/)
set(APR_ICONV_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/deps/APR-Iconv)
set(APR_ICONV_INSTALL_DIR ${APR_ICONV_DIR})

ExternalProject_Add(APR_ICONV
    SOURCE_DIR ${APR_ICONV_SOURCE_DIR}
    BINARY_DIR ${APR_ICONV_BINARY_DIR}
    INSTALL_DIR ${APR_ICONV_INSTALL_DIR}
    BUILD_ALWAYS OFF

    # Custom configuration command
    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo "Configuring APR-Iconv..."
    COMMAND ${CMAKE_COMMAND} -B ${APR_ICONV_BINARY_DIR} -S ${APR_ICONV_SOURCE_DIR} 
							-G ${CMAKE_GENERATOR}
							-DCMAKE_INSTALL_PREFIX=${APR_ICONV_INSTALL_DIR}
							-DCMAKE_BUILD_TYPE=Release
							-DCMAKE_CONFIGURATION_TYPES=Release
							-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
							-DAPR_SOURCE_DIR=${APR_SOURCE_DIR}
							-DAPR_INSTALL_DIR=${APR_INSTALL_DIR}
							-DCMAKE_MODULE_PATH=${CMAKE_CURRENT_SOURCE_DIR}
							-DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
							-DENV_PATH=${ENV_PATH}


    BUILD_COMMAND ${CMAKE_COMMAND} -E echo "Starting APR-Iconv build..."
    COMMAND ${CMAKE_COMMAND} --build ${APR_ICONV_BINARY_DIR} --config Release

    INSTALL_COMMAND ${CMAKE_COMMAND} --install ${APR_ICONV_BINARY_DIR} --config Release
    LOG_CONFIGURE ON
    LOG_BUILD ON
    LOG_INSTALL ON
	EXCLUDE_FROM_ALL 
	DEPENDS APR
)

set_target_properties(APR_ICONV PROPERTIES FOLDER "")

set(APR_ICONV_DEPENDS APR_ICONV)

endif()

set(APR_UTIL_DIR ${CMAKE_BINARY_DIR}/_deps/APR-Util/)

set(APR_UTIL_BINARY_DIR ${CMAKE_BINARY_DIR}/APR-Util/)
set(APR_UTIL_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/deps/APR-Util)
set(APR_UTIL_INSTALL_DIR ${APR_UTIL_DIR})

FetchContent_Declare(
    apr_util
    GIT_REPOSITORY https://github.com/apache/apr-util.git
    GIT_TAG 1.6.x
    SOURCE_DIR ${APR_UTIL_SOURCE_DIR}/src
)

if(NOT apr_util_POPULATED)
    FetchContent_Populate(apr_util)
endif()

ExternalProject_Add(APR_UTIL
    SOURCE_DIR ${APR_UTIL_SOURCE_DIR}
    BINARY_DIR ${APR_UTIL_BINARY_DIR}
    INSTALL_DIR ${APR_UTIL_INSTALL_DIR}
    BUILD_ALWAYS OFF

    # Custom configuration command
    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo "Configuring APR-Util..."
    COMMAND ${CMAKE_COMMAND} -B ${APR_UTIL_BINARY_DIR} -S ${APR_UTIL_SOURCE_DIR} 
							-G ${CMAKE_GENERATOR}
							-DCMAKE_INSTALL_PREFIX=${APR_UTIL_INSTALL_DIR}
							-DCMAKE_BUILD_TYPE=Release
							-DCMAKE_CONFIGURATION_TYPES=Release
							-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
							-DAPR_SOURCE_DIR=${APR_SOURCE_DIR}
							-DAPR_INSTALL_DIR=${APR_INSTALL_DIR}
							-DAPR_ICONV_SOURCE_DIR=${APR_ICONV_SOURCE_DIR}
							-DAPR_ICONV_INSTALL_DIR=${APR_ICONV_INSTALL_DIR}
							-DCMAKE_MODULE_PATH=${CMAKE_CURRENT_SOURCE_DIR}
							-DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
							-DEXPAT_INSTALL_DIR=${EXPAT_INSTALL_DIR}lib/cmake/expat-2.5.0
							-DENV_PATH=${ENV_PATH}


    BUILD_COMMAND ${CMAKE_COMMAND} -E echo "Starting APR-Util build..."
    COMMAND ${CMAKE_COMMAND} --build ${APR_UTIL_BINARY_DIR} --config Release

    INSTALL_COMMAND ${CMAKE_COMMAND} --install ${APR_UTIL_BINARY_DIR} --config Release
    LOG_CONFIGURE ON
    LOG_BUILD ON
    LOG_INSTALL ON
	EXCLUDE_FROM_ALL 
	DEPENDS EXPAT APR ${APR_ICONV_DEPENDS}
)

set_target_properties(APR_UTIL PROPERTIES FOLDER "")

# Build the actual Log4cxx ast static without polluting main cmakefile
set(LOG4CXX_DIR ${CMAKE_BINARY_DIR}/_deps/log4cxx/)  # Base directory for ONNX Runtime

set(LOG4CXX_BINARY_DIR ${CMAKE_BINARY_DIR}/log4cxx/)
set(LOG4CXX_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(LOG4CXX_INSTALL_DIR ${LOG4CXX_DIR})

FetchContent_Declare(
    logging_log4cxx
    GIT_REPOSITORY https://github.com/apache/logging-log4cxx.git
    SOURCE_DIR ${LOG4CXX_SOURCE_DIR}
)

if(NOT logging_log4cxx_POPULATED)
    FetchContent_Populate(logging_log4cxx)
endif()

ExternalProject_Add(Log4cxx
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}
    SOURCE_SUBDIR cmake
    BINARY_DIR ${LOG4CXX_BINARY_DIR}
    INSTALL_DIR ${LOG4CXX_INSTALL_DIR}
    BUILD_ALWAYS OFF

    # Custom configuration command
    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo "Configuring Log4cxx..."
    COMMAND ${CMAKE_COMMAND} -B ${LOG4CXX_BINARY_DIR} -S ${CMAKE_CURRENT_SOURCE_DIR}/cmake 
							-G ${CMAKE_GENERATOR}
							-DCMAKE_INSTALL_PREFIX=${LOG4CXX_INSTALL_DIR}
							-DCMAKE_BUILD_TYPE=Release
							-DCMAKE_CONFIGURATION_TYPES=Release
							-DCMAKE_CXX_STANDARD=20
							-DLOG4CXX_SOURCE_DIR=${LOG4CXX_SOURCE_DIR}
							-DAPR_INSTALL_DIR=${APR_INSTALL_DIR}
							-DAPR_UTIL_INSTALL_DIR=${APR_UTIL_INSTALL_DIR}
							-DAPR_ICONV_INSTALL_DIR=${APR_ICONV_INSTALL_DIR}
							-DEXPAT_INSTALL_DIR=${EXPAT_INSTALL_DIR}
							-DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
							-DCMAKE_MODULE_PATH=${CMAKE_CURRENT_SOURCE_DIR}

    BUILD_COMMAND ${CMAKE_COMMAND} -E echo "Starting Log4cxx build..."
    COMMAND ${CMAKE_COMMAND} --build ${LOG4CXX_BINARY_DIR} --config Release

    INSTALL_COMMAND ${CMAKE_COMMAND} --install ${LOG4CXX_BINARY_DIR} --config Release
    LOG_CONFIGURE ON
    LOG_BUILD ON
    LOG_INSTALL ON
	DEPENDS APR_UTIL APR
)

set_target_properties(Log4cxx PROPERTIES FOLDER "")

set(LOG4CXX_INCLUDE_DIR ${LOG4CXX_DIR}/include CACHE INTERNAL "Log4cxx include directory")
set(LOG4CXX_LIB_DIR ${LOG4CXX_DIR}/lib CACHE INTERNAL "Log4cxx lib directory")